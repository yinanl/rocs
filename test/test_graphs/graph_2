#graph_2: designed mainly for testing “must_reach_set”
#graph structure:
#0--(9,0.1)--> 6, 0—(9,0.2)—> 2
#2—(10,0.2)--> 4, 2—(3,0.2)—> 6, 2—(10,0.1)--> 8
#3—(6,0.4)—> 7, 3—(1,0.1)—> 0
#4—(7,0.9)—> 1, 4—(12,0.7)--> 8
#5—(30,0.1)--> 1, 5—(8,0.3)—> 4
#6—(12,0.9)--> 4, 6—(4,0.3)—> 5
#7—(5,0.8)—> 3, 7—(11,0.5)--> 9, 7—(3,0.3)—> 2, 7—(5,0.7)—> 8
#8—(1,0.3)—> 1, 8—(1,0.5)—> 5
#9—(15,0.8)--> 3


#the number of edges and vertices
nE=20
nV=10
nU=13

#trans=[from, to, control_index, time, weight, edge_index]
trans=0,6,9,0.1,0.1,0
trans=0,2,9,0.2,0.2,1
trans=2,4,10,0.2,0.2,2
trans=2,6,3,0.2,0.2,3
trans=2,8,10,0.1,0.1,4
trans=3,7,6,0.4,0.4,5
trans=3,0,1,0.1,0.1,6
trans=4,1,7,0.9,0.9,7
trans=4,8,12,0.7,0.7,8
trans=5,1,2,0.1,0.1,9
trans=5,4,8,0.3,0.3,10
trans=6,4,12,0.9,0.9,11
trans=6,5,4,0.3,0.3,12
trans=7,3,5,0.8,0.8,13
trans=7,9,11,0.5,0.5,14
trans=7,2,3,0.3,0.3,15
trans=7,8,5,0.7,0.7,16
trans=8,1,1,0.3,0.3,17
trans=8,5,1,0.5,0.5,18
trans=9,3,0,0.8,0.8,19

avoids=1,4,5


#expected results
exp_reach=0,1,2,4,5,6,8
exp_edge_blocked=13